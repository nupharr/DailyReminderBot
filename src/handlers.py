from datetime import datetime
from aiogram.filters import Command, CommandStart
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from src.database import add_reminder, get_user_reminders, delete_reminder


rt = Router()


class Reminder(StatesGroup):
    text = State()
    time = State()


@rt.message(CommandStart())
async def command_start(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} üëã\n\n–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n/add - –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚ûï\n/list - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π üìã\n/delete - –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚ûñ"
    )


@rt.message(Command("add"))
async def command_add(message: Message, state: FSMContext):
    await state.set_state(Reminder.text)
    await message.answer(
        '–ö–∞–∫ –±—É–¥–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?\n‚ùó –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–∏—à–∏ "–û–¢–ú–ï–ù–ê"'
    )


@rt.message(Reminder.text)
async def reminder_text(message: Message, state: FSMContext):
    if message.text == "–û–¢–ú–ï–ù–ê":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ")
    else:
        await state.update_data(text=message.text)
        await state.set_state(Reminder.time)
        await message.answer("–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (18:30)")


@rt.message(Reminder.time)
async def reminder_time(message: Message, state: FSMContext):
    user_input = message.text.strip()

    try:
        valid_time = datetime.strptime(user_input, "%H:%M")
    except ValueError:
        await message.answer(
            "‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä 18:45."
        )
        return

    await state.update_data(time=user_input)
    data = await state.get_data()

    add_reminder(message.from_user.id, data["text"], data["time"])
    await message.answer(
        f"{data["text"]} - {data["time"]}\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!"
    )
    await state.clear()


@rt.message(Command("list"))
async def command_list(message: Message):
    reminders = get_user_reminders(message.from_user.id)

    if not reminders:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
        return

    text_lines = ["üìù –¢–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:"]

    for idx, (rem_id, text, time) in enumerate(reminders, start=1):
        text_lines.append(f"{idx}. {text} - {time}")

    responce = "\n".join(text_lines)
    await message.answer(responce)


@rt.message(Command("delete"))
async def command_delete(message: Message):
    reminders = get_user_reminders(message.from_user.id)
    if not reminders:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    kb = InlineKeyboardBuilder()

    for rem_id, text, time in reminders:
        display = f"{text} - {time}"
        kb.button(text=display, callback_data=f"delete:{rem_id}")

    await message.answer(
        "–í—ã–±–µ—Ä–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å:", reply_markup=kb.as_markup()
    )


@rt.callback_query(F.data.startswith("delete:"))
async def process_delete_callback(callback_query: CallbackQuery):
    reminder_id = int(callback_query.data.split(":")[1])
    delete_reminder(reminder_id)

    await callback_query.answer("–£–¥–∞–ª–µ–Ω–æ ‚úÖ")
    await callback_query.message.edit_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
